h1. Service layer

In term of design, the service project is very similar to the persistence because we will create an interface and its implementation. Why are we repeating the interface? The answer is evident: it is for decoupling the service from the DAO implementation to allow you to switch easily from one ORM to another.  This design will also allow us to upgrade the service bundle afterwards without having to bring down the rest of the application.

STEP 1 : Edit the following file {{src/main/java/org/fusesource/devoxx/reportincident/service/IncidentService.java}} in the module {{service}}

{snippet:url=src/main/snippets/IncidentService.java}
{snippet}

STEP 2 : Edit its implementation in the sub-directory {{impl/IncidentServiceImpl.java}}

{snippet:url=src/main/snippets/IncidentServiceImpl.java}
{snippet}

As you see, we will use {{IncidentDAO}} class within the {{IncidentServiceImpl}} class. The injection of this bean will be done by Spring. As Spring will be used as Transaction Manager, the service layer will be configured to define which classes/methods are transactional and which propagation option (in our case: {{PROPAGATION_REQUIRED}}) will be used to check / retrieve the transaction from the transaction manager. We are not using the Spring @Transactional annotations, but this example could be easily transformed to use Spring's annotation-based transactions instead.

STEP 3 : Edit the file {{src/main/resources/META-INF/spring/spring-service-beans-dao.xml}}

{snippet:url=src/main/snippets/spring-service-beans-dao.xml}
{snippet}

Also note how we are referring to the OSGi Service Registry for retrieving the transaction manager we registered before when building the {{persistence-jpa}} module.

STEP 4 : The last step requires that we expose our Service on the OSGi container to allow the Apache Camel route as well as the Apache Wicket web application to use it

{snippet:url=src/main/snippets/spring-service-beans-dao-osgi.xml}
{snippet}

By now, we have to put in place the DAO / services layers,  we added transaction management and registered the services into the OSGi Service Registry that will allow us to do CRUD operations on our {{Incident}} class. It is time now to design the web service, create the camel routes and install the Web project.
