h1. Define persistence layer (DAO)

Now that the model exists, we will create the persistence and services layers. The projects have been designed using the _Data Access Object_ pattern because it allows changing the implementation from one database or ORM tool to the other very easily.
Moreover, the same interfaces are also used as the 'contract' between the services and the DAO. This offers the advantage to decouple objects in the application and, as you will see later on, it will allow us to deploy services and persistence as separate bundles into the OSGi container.

First we create the DAO Interface and its implementation

STEP 1 : Create the Interface {{IncidentDAO}} in the directory {{src/main/java/org/fusesource/devoxx/reportincident/dao}}

{snippet:url=src/main/snippets/IncidentDAO.java}
{snippet}

STEP 2 : Its implementation {{IncidentDAOImpl}}

{snippet:url=src/main/snippets/IncidentDAOImpl.java}
{snippet}

To create the Local JPA Container, we will use Spring to simplify our life and also to setup the DataSource and the Transaction Manager required by JPA.

STEP 3 : Edit the file under {{src/main/resources/META-INF/spring/persistence-dao.xml}}

STEP 4: Add Spring beans to scan {{@Persistencecontext}} annotation under {{<beans>}}

{snippet:url=src/main/snippets/persistence-dao-annotation-config.xml}
{snippet}

STEP 5 : Define the bean {{LocalContainerEntityManagerFactoryBean}}

{snippet:url=src/main/snippets/persistence-dao-entity-manager-factory.xml}
{snippet}

STEP 6 : Define the {{OpenJPAVendorAdapter}} with H2 properties

{snippet:url=src/main/snippets/persistence-dao-adapter.xml}
{snippet}

STEP 7 : Define the datasource using Apache Commons DBCP

{snippet:url=src/main/snippets/persistence-dao-datasource.xml}
{snippet}

STEP 8 : As JPA and EntityManager will work with Transactions, a Transaction Manager must be created

{snippet:url=src/main/snippets/persistence-dao-txmanager.xml}
{snippet}

STEP 9 : The Transaction manager created previously will be exported as an OSGI service. By default, an OSGi platform is not JNDI compliant but Spring DM makes it very easy to expose beans as services into the OSGi Service Registry.  In our example we will also using a key define a filter to make sure we retrieve this particular instance when looking at the list of the interfaces registered under {{org.springframework.transaction.PlatformTransactionManager}}.

{snippet:url=src/main/snippets/persistence-dao-txmanager-osgi.xml}
{snippet}

STEP 10: Finally, create the DAO bean and also register it under its interface with as an OSGi service.  This service will then be used by the Service layer (up next).

{snippet:url=src/main/snippets/persistence-dao-data-access-object.xml}
{snippet}





